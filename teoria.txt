elementos:
clases 
propiedades
metodos
objetos

poo tiene 4 pilares:
encapsulamiento 
abstraccion
herencia
polimorfismo

tiene mucho que ver con UML (unified modeling language)
lenguaje de modelado unificado

analisar: observar -> graficar -> programar 
el UML nos ayudara a graficar

declarar e instanciar un objeto
Doctor myDoctor = new Doctor();
myDoctor.name = "jean gonzales";
myDoctor.showName();

static para que sea global
sobrecarga: para que dos o mas metodos tengan el mismo nombre pero sus argumentos o valor
de retorno son diferentes
sobrecarga de constructores: cuando le pasamos parametros

encapsulamiento: restringir el acceso a una variable// evitar conflico de inconsistencia 
usamos los modificadores que permiten acceso al parametro dentro de una clase
modificador   clase   package   subclase    otros
public		*	*	   *	      *
protected	*	*	   *	      
default		*	*
private		*

getters y setters  //se encargan de validar los parametos o datos q se quieran asignar
perminen leer y escribir los valores de las variables miembro 
get obtener, set,o actualizar poner el dato de la variable

Clases Wrapper / objeto primitivo
Byte,Short, Integer, Long, Float, Double, Character, Boolean, String

clases anidadas ...

herencia:super clase o clase padre, sirve para reutilizar
se utiliza usando extend en la clase hija 
no se permite herencia multiple 
super = se refiere a la super clase  > this = variable de la misma clase que se usa

Polimorfismo

sobreescritura: modificar los metodos de alguna clase hija, final o static no se pueden sobreescribir

